#ifndef _BATTLEMANAGER_H_
#define _BATTLEMANAGER_H_

#include "include.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class TurnOwner { Attacker, Defender };

//공격자/수비자의 상태, 현재 턴, 체력 등
class BattleState {
public:
  int atkHP = 0;            // 공격자 체력
  int defHP = 0;            // 수비자 체력
  int atkDamage = 0;		// 공격자 공격력
  int defDamage = 0;		// 수비자 공격력
  int atkEvaded = 0;		// 공격자 회피율
  int defEvaded = 0;		// 수비자 회피율

  TurnOwner currentTurn;    // 지금 누구 차례냐

  bool attackerDefending = false;
  bool defenderDefending = false;

  bool isBattleOver = false;

  // 턴 넘기기
  void nextTurn();

  // 누가 죽었나 체크
  bool checkVictory();
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 공격, 방어, 아이템 등 행동을 정의
enum class BattleActionType {
  Attack,   // 후드려패기
  Defend,   // 방어 → 다음 턴 덜 맞음
  UseItem   // 나중에 아이템 쓸 거
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct BattleAction {
  BattleActionType type;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//실제 행동 처리 (공격력 계산, HP 감소 등)
class BattleSystem {

public:
  void ActionButton(Piece* actor, Piece* target, BattleAction action, BattleState& state); // 버튼 
  bool isCriticalHit(); // 크리티컬
  bool isEvaded(Piece* hitied);		// 회피
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//배틀 화면 전체를 관리하는 컨트롤러
class BattlePhase {
private:
	Piece* attacker;           // 때리는 놈
	Piece* defender;           // 맞는 놈
	BattleState state;         // 현재 체력, 턴, 전투 종료 여부 다 들고 있음
	BattleSystem system;       // 때리고 맞고 데미지 계산해주는 놈

public:
	// 전투 초기화. 체스판에서 쌈 붙을 때 호출
	void init(Piece* atk, Piece* def);

	// 매 프레임마다 호출됨. 전투 상태 업데이트 + 턴 처리 등
	void update();

	// 버튼 누르면 호출됨
  void onActionSelected(BattleAction action);
};


#endif